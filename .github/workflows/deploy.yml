name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Backend: Set up Python and run tests
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install uv
        run: |
          python -m pip install --upgrade pip
          pip install uv
      - name: Create Python virtual environment
        run: uv venv .venv
      - name: Install dependencies
        run: uv pip install -r backend/requirements.txt
      - name: Run backend tests
        run: |
          source .venv/bin/activate
          PYTHONPATH=$PYTHONPATH:$(pwd) pytest backend/tests --maxfail=1 --disable-warnings

      # Frontend: Set up Node.js and build
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install frontend dependencies
        run: cd frontend && npm ci
      - name: Build frontend
        run: cd frontend && npm run build
      - name: Upload frontend build
        uses: actions/upload-pages-artifact@v3
        with:
          name: frontend-dist
          path: frontend/dist

  deploy:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist
      - name: Extract frontend artifact
        run: |
          cd frontend/dist
          tar -xf artifact.tar
          rm artifact.tar
      # Deploy to Alibaba Cloud server
      - name: List backend and frontend/dist files
        run: |
          echo "Backend files:"
          ls -l backend || echo "No backend directory"
          echo "Frontend build files:"
          ls -l frontend/dist || echo "No frontend/dist directory"

      # Use GitHub's upload/download actions for artifacts between jobs,
      # but for deployment to server, use a different approach
      - name: Prepare backend files for transfer
        run: tar -czf backend.tar.gz backend

      - name: Prepare frontend files for transfer
        run: tar -czf frontend.tar.gz frontend/dist

      - name: Deploy files using scp and ssh
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "backend.tar.gz,frontend.tar.gz"
          target: "/home/thinking/thinking"
          strip_components: 0
          overwrite: true
          
      - name: Extract files and restart services
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script_stop: true
          script: |
            cd /home/thinking/thinking
            
            # Extract backend files
            echo "Extracting backend files..."
            mkdir -p backend-temp
            tar -xzf backend.tar.gz -C backend-temp
            rm -rf backend/*
            cp -r backend-temp/backend/* backend/
            rm -rf backend-temp
            rm backend.tar.gz
            
            # Extract frontend files
            echo "Extracting frontend files..."
            mkdir -p frontend-temp
            tar -xzf frontend.tar.gz -C frontend-temp
            rm -rf frontend/dist/*
            cp -r frontend-temp/frontend/dist/* frontend/dist/
            rm -rf frontend-temp
            rm frontend.tar.gz
      - name: Restart backend and reload Nginx
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /home/thinking/thinking/backend
            sudo systemctl restart thinking-backend
            sudo systemctl reload nginx
