name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Backend: Set up Python and run tests
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install uv
        run: |
          python -m pip install --upgrade pip
          pip install uv
      - name: Create Python virtual environment
        run: uv venv .venv
      - name: Install dependencies
        run: uv pip install -r backend/requirements.txt
      - name: Run backend tests
        run: |
          source .venv/bin/activate
          PYTHONPATH=$PYTHONPATH:$(pwd) pytest backend/tests --maxfail=1 --disable-warnings

      # Frontend: Set up Node.js and build
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install frontend dependencies
        run: cd frontend && npm ci
      - name: Build frontend
        run: cd frontend && npm run build
      - name: Upload frontend build
        uses: actions/upload-pages-artifact@v3
        with:
          name: frontend-dist
          path: frontend/dist

  deploy:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist
      - name: Extract frontend artifact
        run: |
          cd frontend/dist
          tar -xf artifact.tar
          rm artifact.tar
      # Deploy to Alibaba Cloud server
      - name: List backend and frontend/dist files
        run: |
          echo "Backend files:"
          ls -l backend || echo "No backend directory"
          echo "Frontend build files:"
          ls -l frontend/dist || echo "No frontend/dist directory"

      # Use GitHub's upload/download actions for artifacts between jobs,
      # but for deployment to server, use a different approach
      - name: Prepare backend files for transfer
        run: tar -czf backend.tar.gz backend

      - name: Prepare frontend files for transfer
        run: tar -czf frontend.tar.gz frontend/dist

      - name: Deploy files using scp and ssh
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "backend.tar.gz,frontend.tar.gz"
          target: "/home/thinking/thinking"
          strip_components: 0
          overwrite: true
          
      - name: Extract files to deploy directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script_stop: true
          script: |
            # Create a deploy directory owned by the thinking user
            cd /home/thinking
            mkdir -p deploy_new/backend
            mkdir -p deploy_new/frontend/dist
            
            # Extract backend files
            echo "Extracting backend files..."
            cd /home/thinking/thinking
            tar -xzf backend.tar.gz -C /home/thinking/deploy_new
            
            # Extract frontend files
            echo "Extracting frontend files..."
            tar -xzf frontend.tar.gz -C /home/thinking/deploy_new
            
            # Clean up tar files
            rm backend.tar.gz frontend.tar.gz
            
            # Create a marker file to signal the new deployment is ready
            touch /home/thinking/deploy_new/READY
      - name: Create deployment script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script_stop: true
          script: |
            # Create a deployment script that can be run by the thinking user
            cat > /home/thinking/deploy.sh << 'EOL'
            #!/bin/bash
            # Check if the new deployment is ready
            if [ ! -f /home/thinking/deploy_new/READY ]; then
              echo "New deployment not ready. Aborting."
              exit 1
            fi
            
            # Notify about deployment
            echo "Deploying new version..."
            
            # Request service restart (this will use the sudoers configuration)
            echo "Restarting services..."
            systemctl restart thinking-backend || echo "Failed to restart backend service"
            systemctl reload nginx || echo "Failed to reload nginx"
            
            # Move the new files into place (for next restart)
            echo "Updating files for next service restart..."
            mkdir -p /home/thinking/thinking/backend_backup
            mkdir -p /home/thinking/thinking/frontend/dist_backup
            
            # Create a backup of current files
            rsync -a --delete /home/thinking/thinking/backend/ /home/thinking/thinking/backend_backup/
            rsync -a --delete /home/thinking/thinking/frontend/dist/ /home/thinking/thinking/frontend/dist_backup/
            
            # Deploy new files that the thinking user owns
            rsync -a --delete /home/thinking/deploy_new/backend/ /home/thinking/thinking/backend/
            rsync -a --delete /home/thinking/deploy_new/frontend/dist/ /home/thinking/thinking/frontend/dist/
            
            # Clean up
            rm -rf /home/thinking/deploy_new
            echo "Deployment complete."
            EOL
            
            # Make the script executable
            chmod +x /home/thinking/deploy.sh
            
      - name: Run deployment script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Run the deployment script
            /home/thinking/deploy.sh
