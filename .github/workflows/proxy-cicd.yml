name: Proxy CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'proxy/**'
      - '.github/workflows/proxy-cicd.yml'
  workflow_dispatch:
  pull_request:
    paths:
      - 'proxy/**'
      - '.github/workflows/proxy-cicd.yml'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: proxy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      - name: Run tests (if any)
        run: |
          if [ -d "tests" ]; then pytest; else echo "No tests directory, skipping tests."; fi

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_PROXY_SSH_KEY }}
      - name: Add server to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.DEPLOY_PROXY_HOST }} >> ~/.ssh/known_hosts
      - name: Deploy to server as deploy user
        env:
          DEPLOY_PROXY_HOST: ${{ secrets.DEPLOY_PROXY_HOST }}
          DEPLOY_PROXY_USER: deploy
        run: |
          ssh -o StrictHostKeyChecking=no $DEPLOY_PROXY_USER@$DEPLOY_PROXY_HOST 'mkdir -p ~/thinking/proxy'
          scp -r proxy/* $DEPLOY_PROXY_USER@$DEPLOY_PROXY_HOST:~/thinking/proxy/
          ssh -o StrictHostKeyChecking=no $DEPLOY_PROXY_USER@$DEPLOY_PROXY_HOST '
            set -e # Exit on error
            cd ~/thinking/proxy
            echo "Setting up Python environment..."
            
            # Create a local venv directory
            python3 -m venv .venv || {
              echo "Failed to create venv with python3. Trying with python3.11..."
              python3.11 -m venv .venv || {
                echo "ERROR: Could not create Python virtual environment. Please install Python 3.11."
                exit 1
              }
            }
            
            # Activate the virtual environment
            source .venv/bin/activate || {
              echo "ERROR: Failed to activate virtual environment"
              exit 1
            }
            
            # Install dependencies
            echo "Installing dependencies..."
            pip install --upgrade pip
            pip install -r requirements.txt || {
              echo "ERROR: Failed to install requirements"
              exit 1
            }
            
            # Run the restart script
            echo "Restarting the proxy service..."
            bash bin/restart.sh
          '
